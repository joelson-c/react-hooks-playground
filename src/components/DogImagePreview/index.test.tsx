import React from 'react';
import { wait, fireEvent } from '@testing-library/react';

import DogImagePreview from '.';
import { renderWithStore } from '../TestUtils';

describe('DogImagePreview', () => {
  test('should render an image with text, given a validated form', async () => {
    const expectedName = 'My dog';
    const expectedColor = 'white';
    const expectedImageUrl = 'testUrl'; // Value generated by mock

    const formData = {
      form: {
        dogBreed: 'test',
        dogName: expectedName,
        textColor: expectedColor,
        textStyle: ''
      }
    };
    expect.assertions(4);

    const { getByText, getByAltText } = renderWithStore(<DogImagePreview />, formData);
    await wait();
    const dogNameText = getByText(expectedName);
    const image = getByAltText('dog');
    fireEvent.load(image);

    expect(image).toBeVisible();
    expect(dogNameText).toHaveStyle(`color: ${expectedColor}`);
    expect(image).toBeVisible();
    expect(image).toHaveAttribute('src', expectedImageUrl);
  });

  test('should not render the image, while it is not loaded', async () => {
    const formData = {
      form: {
        dogBreed: 'test',
        dogName: 'test',
        textColor: 'white',
        textStyle: ''
      }
    };
    expect.assertions(1);

    const { getByAltText } = renderWithStore(<DogImagePreview />, formData);
    await wait();
    const image = getByAltText('dog');

    expect(image).not.toBeVisible();
  });

  test('should render a placeholder, while it is not loaded', async () => {
    const formData = {
      form: {
        dogBreed: 'test',
        dogName: 'test',
        textColor: 'white',
        textStyle: ''
      }
    };
    expect.assertions(1);

    const { getByAltText } = renderWithStore(<DogImagePreview />, formData);
    await wait();
    const image = getByAltText('dog');

    expect(image).not.toBeVisible();
  });

  test('should render an error message, when the image could not be loaded', async () => {
    const formData = {
      form: {
        dogBreed: 'test',
        dogName: 'test',
        textColor: 'white',
        textStyle: ''
      }
    };
    expect.assertions(1);

    const { getByText, getByAltText } = renderWithStore(<DogImagePreview />, formData);
    await wait();
    const image = getByAltText('dog');
    fireEvent.error(image);

    expect(getByText(/the image could not be loaded/i)).toBeInTheDocument();
  });
});